// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: locker_user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createLockerUser = `-- name: CreateLockerUser :execresult
INSERT INTO locker_user (user_id, locker_id) VALUES ($1, $2)
`

func (q *Queries) CreateLockerUser(ctx context.Context) (sql.Result, error) {
	return q.exec(ctx, q.createLockerUserStmt, createLockerUser)
}

const deleteLockerUser = `-- name: DeleteLockerUser :exec
DELETE FROM locker_user WHERE id = $1
`

func (q *Queries) DeleteLockerUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteLockerUserStmt, deleteLockerUser)
	return err
}

const getLockerUser = `-- name: GetLockerUser :one
SELECT id, user_id, locker_id, created_at, last_modified FROM locker_user WHERE id = $1
`

func (q *Queries) GetLockerUser(ctx context.Context) (LockerUser, error) {
	row := q.queryRow(ctx, q.getLockerUserStmt, getLockerUser)
	var i LockerUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LockerID,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const updateLockerUser = `-- name: UpdateLockerUser :execresult
UPDATE locker_user SET user_id = $1, locker_id = $2 WHERE id = $3
`

func (q *Queries) UpdateLockerUser(ctx context.Context) (sql.Result, error) {
	return q.exec(ctx, q.updateLockerUserStmt, updateLockerUser)
}
