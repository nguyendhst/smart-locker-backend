// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: lockers.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createLocker = `-- name: CreateLocker :execresult
INSERT INTO lockers (locker_number, location, status, nfc_sig) VALUES (?, ?, ?, ?)
`

type CreateLockerParams struct {
	LockerNumber int32         `json:"lockerNumber"`
	Location     string        `json:"location"`
	Status       LockersStatus `json:"status"`
	NfcSig       string        `json:"nfcSig"`
}

func (q *Queries) CreateLocker(ctx context.Context, arg CreateLockerParams) (sql.Result, error) {
	return q.exec(ctx, q.createLockerStmt, createLocker,
		arg.LockerNumber,
		arg.Location,
		arg.Status,
		arg.NfcSig,
	)
}

const deleteLocker = `-- name: DeleteLocker :exec
DELETE FROM lockers WHERE id = ?
`

func (q *Queries) DeleteLocker(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteLockerStmt, deleteLocker, id)
	return err
}

const getLocker = `-- name: GetLocker :one
SELECT locker_number, location, last_accessed FROM lockers WHERE id = ?
`

type GetLockerRow struct {
	LockerNumber int32        `json:"lockerNumber"`
	Location     string       `json:"location"`
	LastAccessed sql.NullTime `json:"lastAccessed"`
}

func (q *Queries) GetLocker(ctx context.Context, id int32) (GetLockerRow, error) {
	row := q.queryRow(ctx, q.getLockerStmt, getLocker, id)
	var i GetLockerRow
	err := row.Scan(&i.LockerNumber, &i.Location, &i.LastAccessed)
	return i, err
}

const getLockerByLockerNumber = `-- name: GetLockerByLockerNumber :one
SELECT id, locker_number, location, status, nfc_sig, last_accessed, lock_status, created_at, last_modified FROM lockers WHERE locker_number = ?
`

func (q *Queries) GetLockerByLockerNumber(ctx context.Context, lockerNumber int32) (Locker, error) {
	row := q.queryRow(ctx, q.getLockerByLockerNumberStmt, getLockerByLockerNumber, lockerNumber)
	var i Locker
	err := row.Scan(
		&i.ID,
		&i.LockerNumber,
		&i.Location,
		&i.Status,
		&i.NfcSig,
		&i.LastAccessed,
		&i.LockStatus,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const getLockerByLockerNumberAndLocation = `-- name: GetLockerByLockerNumberAndLocation :one
SELECT id, locker_number, location, status, nfc_sig, last_accessed, lock_status, created_at, last_modified FROM lockers WHERE locker_number = ? AND location = ?
`

type GetLockerByLockerNumberAndLocationParams struct {
	LockerNumber int32  `json:"lockerNumber"`
	Location     string `json:"location"`
}

func (q *Queries) GetLockerByLockerNumberAndLocation(ctx context.Context, arg GetLockerByLockerNumberAndLocationParams) (Locker, error) {
	row := q.queryRow(ctx, q.getLockerByLockerNumberAndLocationStmt, getLockerByLockerNumberAndLocation, arg.LockerNumber, arg.Location)
	var i Locker
	err := row.Scan(
		&i.ID,
		&i.LockerNumber,
		&i.Location,
		&i.Status,
		&i.NfcSig,
		&i.LastAccessed,
		&i.LockStatus,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const getLockerByNfcSig = `-- name: GetLockerByNfcSig :one
SELECT id, lock_status FROM lockers WHERE nfc_sig = ?
`

type GetLockerByNfcSigRow struct {
	ID         int32             `json:"id"`
	LockStatus LockersLockStatus `json:"lockStatus"`
}

func (q *Queries) GetLockerByNfcSig(ctx context.Context, nfcSig string) (GetLockerByNfcSigRow, error) {
	row := q.queryRow(ctx, q.getLockerByNfcSigStmt, getLockerByNfcSig, nfcSig)
	var i GetLockerByNfcSigRow
	err := row.Scan(&i.ID, &i.LockStatus)
	return i, err
}

const updateLockStatus = `-- name: UpdateLockStatus :execresult
UPDATE lockers SET lock_status = ? WHERE id = ?
`

type UpdateLockStatusParams struct {
	LockStatus LockersLockStatus `json:"lockStatus"`
	ID         int32             `json:"id"`
}

func (q *Queries) UpdateLockStatus(ctx context.Context, arg UpdateLockStatusParams) (sql.Result, error) {
	return q.exec(ctx, q.updateLockStatusStmt, updateLockStatus, arg.LockStatus, arg.ID)
}

const updateLocker = `-- name: UpdateLocker :execresult
UPDATE lockers SET locker_number = ?, location = ?, status = ?, nfc_sig = ? WHERE id = ?
`

type UpdateLockerParams struct {
	LockerNumber int32         `json:"lockerNumber"`
	Location     string        `json:"location"`
	Status       LockersStatus `json:"status"`
	NfcSig       string        `json:"nfcSig"`
	ID           int32         `json:"id"`
}

func (q *Queries) UpdateLocker(ctx context.Context, arg UpdateLockerParams) (sql.Result, error) {
	return q.exec(ctx, q.updateLockerStmt, updateLocker,
		arg.LockerNumber,
		arg.Location,
		arg.Status,
		arg.NfcSig,
		arg.ID,
	)
}

const updateLockerNfcSig = `-- name: UpdateLockerNfcSig :execresult
UPDATE lockers SET nfc_sig = ? WHERE id = ?
`

type UpdateLockerNfcSigParams struct {
	NfcSig string `json:"nfcSig"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateLockerNfcSig(ctx context.Context, arg UpdateLockerNfcSigParams) (sql.Result, error) {
	return q.exec(ctx, q.updateLockerNfcSigStmt, updateLockerNfcSig, arg.NfcSig, arg.ID)
}

const updateLockerStatus = `-- name: UpdateLockerStatus :execresult
UPDATE lockers SET status = ? WHERE id = ?
`

type UpdateLockerStatusParams struct {
	Status LockersStatus `json:"status"`
	ID     int32         `json:"id"`
}

func (q *Queries) UpdateLockerStatus(ctx context.Context, arg UpdateLockerStatusParams) (sql.Result, error) {
	return q.exec(ctx, q.updateLockerStatusStmt, updateLockerStatus, arg.Status, arg.ID)
}
